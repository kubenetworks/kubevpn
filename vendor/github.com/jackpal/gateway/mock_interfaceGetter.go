// Code generated by mockery v2.36.0. DO NOT EDIT.

package gateway

import (
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// mockinterfaceGetter is an autogenerated mock type for the interfaceGetter type
type mockinterfaceGetter struct {
	mock.Mock
}

type mockinterfaceGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockinterfaceGetter) EXPECT() *mockinterfaceGetter_Expecter {
	return &mockinterfaceGetter_Expecter{mock: &_m.Mock}
}

// Addrs provides a mock function with given fields: iface
func (_m *mockinterfaceGetter) Addrs(iface *net.Interface) ([]net.Addr, error) {
	ret := _m.Called(iface)

	var r0 []net.Addr
	var r1 error
	if rf, ok := ret.Get(0).(func(*net.Interface) ([]net.Addr, error)); ok {
		return rf(iface)
	}
	if rf, ok := ret.Get(0).(func(*net.Interface) []net.Addr); ok {
		r0 = rf(iface)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]net.Addr)
		}
	}

	if rf, ok := ret.Get(1).(func(*net.Interface) error); ok {
		r1 = rf(iface)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockinterfaceGetter_Addrs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Addrs'
type mockinterfaceGetter_Addrs_Call struct {
	*mock.Call
}

// Addrs is a helper method to define mock.On call
//   - iface *net.Interface
func (_e *mockinterfaceGetter_Expecter) Addrs(iface interface{}) *mockinterfaceGetter_Addrs_Call {
	return &mockinterfaceGetter_Addrs_Call{Call: _e.mock.On("Addrs", iface)}
}

func (_c *mockinterfaceGetter_Addrs_Call) Run(run func(iface *net.Interface)) *mockinterfaceGetter_Addrs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*net.Interface))
	})
	return _c
}

func (_c *mockinterfaceGetter_Addrs_Call) Return(_a0 []net.Addr, _a1 error) *mockinterfaceGetter_Addrs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockinterfaceGetter_Addrs_Call) RunAndReturn(run func(*net.Interface) ([]net.Addr, error)) *mockinterfaceGetter_Addrs_Call {
	_c.Call.Return(run)
	return _c
}

// InterfaceByName provides a mock function with given fields: name
func (_m *mockinterfaceGetter) InterfaceByName(name string) (*net.Interface, error) {
	ret := _m.Called(name)

	var r0 *net.Interface
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*net.Interface, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *net.Interface); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*net.Interface)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockinterfaceGetter_InterfaceByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InterfaceByName'
type mockinterfaceGetter_InterfaceByName_Call struct {
	*mock.Call
}

// InterfaceByName is a helper method to define mock.On call
//   - name string
func (_e *mockinterfaceGetter_Expecter) InterfaceByName(name interface{}) *mockinterfaceGetter_InterfaceByName_Call {
	return &mockinterfaceGetter_InterfaceByName_Call{Call: _e.mock.On("InterfaceByName", name)}
}

func (_c *mockinterfaceGetter_InterfaceByName_Call) Run(run func(name string)) *mockinterfaceGetter_InterfaceByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockinterfaceGetter_InterfaceByName_Call) Return(_a0 *net.Interface, _a1 error) *mockinterfaceGetter_InterfaceByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockinterfaceGetter_InterfaceByName_Call) RunAndReturn(run func(string) (*net.Interface, error)) *mockinterfaceGetter_InterfaceByName_Call {
	_c.Call.Return(run)
	return _c
}

// newMockinterfaceGetter creates a new instance of mockinterfaceGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockinterfaceGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockinterfaceGetter {
	mock := &mockinterfaceGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
