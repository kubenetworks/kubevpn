// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: dhcpserver.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RentIPRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PodName       string                 `protobuf:"bytes,1,opt,name=PodName,proto3" json:"PodName,omitempty"`
	PodNamespace  string                 `protobuf:"bytes,2,opt,name=PodNamespace,proto3" json:"PodNamespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RentIPRequest) Reset() {
	*x = RentIPRequest{}
	mi := &file_dhcpserver_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RentIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RentIPRequest) ProtoMessage() {}

func (x *RentIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcpserver_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RentIPRequest.ProtoReflect.Descriptor instead.
func (*RentIPRequest) Descriptor() ([]byte, []int) {
	return file_dhcpserver_proto_rawDescGZIP(), []int{0}
}

func (x *RentIPRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *RentIPRequest) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

type RentIPResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IPv4CIDR      string                 `protobuf:"bytes,1,opt,name=IPv4CIDR,proto3" json:"IPv4CIDR,omitempty"`
	IPv6CIDR      string                 `protobuf:"bytes,2,opt,name=IPv6CIDR,proto3" json:"IPv6CIDR,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RentIPResponse) Reset() {
	*x = RentIPResponse{}
	mi := &file_dhcpserver_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RentIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RentIPResponse) ProtoMessage() {}

func (x *RentIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcpserver_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RentIPResponse.ProtoReflect.Descriptor instead.
func (*RentIPResponse) Descriptor() ([]byte, []int) {
	return file_dhcpserver_proto_rawDescGZIP(), []int{1}
}

func (x *RentIPResponse) GetIPv4CIDR() string {
	if x != nil {
		return x.IPv4CIDR
	}
	return ""
}

func (x *RentIPResponse) GetIPv6CIDR() string {
	if x != nil {
		return x.IPv6CIDR
	}
	return ""
}

type ReleaseIPRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PodName       string                 `protobuf:"bytes,1,opt,name=PodName,proto3" json:"PodName,omitempty"`
	PodNamespace  string                 `protobuf:"bytes,2,opt,name=PodNamespace,proto3" json:"PodNamespace,omitempty"`
	IPv4CIDR      string                 `protobuf:"bytes,3,opt,name=IPv4CIDR,proto3" json:"IPv4CIDR,omitempty"`
	IPv6CIDR      string                 `protobuf:"bytes,4,opt,name=IPv6CIDR,proto3" json:"IPv6CIDR,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseIPRequest) Reset() {
	*x = ReleaseIPRequest{}
	mi := &file_dhcpserver_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseIPRequest) ProtoMessage() {}

func (x *ReleaseIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcpserver_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseIPRequest.ProtoReflect.Descriptor instead.
func (*ReleaseIPRequest) Descriptor() ([]byte, []int) {
	return file_dhcpserver_proto_rawDescGZIP(), []int{2}
}

func (x *ReleaseIPRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *ReleaseIPRequest) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

func (x *ReleaseIPRequest) GetIPv4CIDR() string {
	if x != nil {
		return x.IPv4CIDR
	}
	return ""
}

func (x *ReleaseIPRequest) GetIPv6CIDR() string {
	if x != nil {
		return x.IPv6CIDR
	}
	return ""
}

type ReleaseIPResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseIPResponse) Reset() {
	*x = ReleaseIPResponse{}
	mi := &file_dhcpserver_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseIPResponse) ProtoMessage() {}

func (x *ReleaseIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcpserver_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseIPResponse.ProtoReflect.Descriptor instead.
func (*ReleaseIPResponse) Descriptor() ([]byte, []int) {
	return file_dhcpserver_proto_rawDescGZIP(), []int{3}
}

func (x *ReleaseIPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_dhcpserver_proto protoreflect.FileDescriptor

const file_dhcpserver_proto_rawDesc = "" +
	"\n" +
	"\x10dhcpserver.proto\x12\x03rpc\"M\n" +
	"\rRentIPRequest\x12\x18\n" +
	"\aPodName\x18\x01 \x01(\tR\aPodName\x12\"\n" +
	"\fPodNamespace\x18\x02 \x01(\tR\fPodNamespace\"H\n" +
	"\x0eRentIPResponse\x12\x1a\n" +
	"\bIPv4CIDR\x18\x01 \x01(\tR\bIPv4CIDR\x12\x1a\n" +
	"\bIPv6CIDR\x18\x02 \x01(\tR\bIPv6CIDR\"\x88\x01\n" +
	"\x10ReleaseIPRequest\x12\x18\n" +
	"\aPodName\x18\x01 \x01(\tR\aPodName\x12\"\n" +
	"\fPodNamespace\x18\x02 \x01(\tR\fPodNamespace\x12\x1a\n" +
	"\bIPv4CIDR\x18\x03 \x01(\tR\bIPv4CIDR\x12\x1a\n" +
	"\bIPv6CIDR\x18\x04 \x01(\tR\bIPv6CIDR\"-\n" +
	"\x11ReleaseIPResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage2y\n" +
	"\x04DHCP\x123\n" +
	"\x06RentIP\x12\x12.rpc.RentIPRequest\x1a\x13.rpc.RentIPResponse\"\x00\x12<\n" +
	"\tReleaseIP\x12\x15.rpc.ReleaseIPRequest\x1a\x16.rpc.ReleaseIPResponse\"\x00B\aZ\x05.;rpcb\x06proto3"

var (
	file_dhcpserver_proto_rawDescOnce sync.Once
	file_dhcpserver_proto_rawDescData []byte
)

func file_dhcpserver_proto_rawDescGZIP() []byte {
	file_dhcpserver_proto_rawDescOnce.Do(func() {
		file_dhcpserver_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dhcpserver_proto_rawDesc), len(file_dhcpserver_proto_rawDesc)))
	})
	return file_dhcpserver_proto_rawDescData
}

var file_dhcpserver_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_dhcpserver_proto_goTypes = []any{
	(*RentIPRequest)(nil),     // 0: rpc.RentIPRequest
	(*RentIPResponse)(nil),    // 1: rpc.RentIPResponse
	(*ReleaseIPRequest)(nil),  // 2: rpc.ReleaseIPRequest
	(*ReleaseIPResponse)(nil), // 3: rpc.ReleaseIPResponse
}
var file_dhcpserver_proto_depIdxs = []int32{
	0, // 0: rpc.DHCP.RentIP:input_type -> rpc.RentIPRequest
	2, // 1: rpc.DHCP.ReleaseIP:input_type -> rpc.ReleaseIPRequest
	1, // 2: rpc.DHCP.RentIP:output_type -> rpc.RentIPResponse
	3, // 3: rpc.DHCP.ReleaseIP:output_type -> rpc.ReleaseIPResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_dhcpserver_proto_init() }
func file_dhcpserver_proto_init() {
	if File_dhcpserver_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dhcpserver_proto_rawDesc), len(file_dhcpserver_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dhcpserver_proto_goTypes,
		DependencyIndexes: file_dhcpserver_proto_depIdxs,
		MessageInfos:      file_dhcpserver_proto_msgTypes,
	}.Build()
	File_dhcpserver_proto = out.File
	file_dhcpserver_proto_goTypes = nil
	file_dhcpserver_proto_depIdxs = nil
}
