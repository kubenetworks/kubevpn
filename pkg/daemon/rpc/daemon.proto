syntax = "proto3";

option go_package = ".;rpc";

package rpc;

service Daemon {
  rpc Connect (stream ConnectRequest) returns (stream ConnectResponse) {}
  rpc Disconnect (stream DisconnectRequest) returns (stream DisconnectResponse) {}
  rpc Proxy (stream ProxyRequest) returns (stream ProxyResponse) {}
  rpc Leave (stream LeaveRequest) returns (stream LeaveResponse) {}
  rpc Sync (stream SyncRequest) returns (stream SyncResponse) {}
  rpc Unsync (stream UnsyncRequest) returns (stream UnsyncResponse) {}
  rpc ConnectionList (ConnectionListRequest) returns (ConnectionListResponse) {}
  rpc ConnectionUse (ConnectionUseRequest) returns (ConnectionUseResponse) {}

  rpc SshStart (SshStartRequest) returns (SshStartResponse) {}
  rpc SshStop (SshStopRequest) returns (SshStopResponse) {}
  rpc Route (RouteRequest) returns (RouteResponse) {}

  rpc Logs (stream LogRequest) returns (stream LogResponse) {}
  rpc Upgrade (UpgradeRequest) returns (UpgradeResponse) {}
  rpc Status (StatusRequest) returns (StatusResponse) {}
  rpc Version (VersionRequest) returns (VersionResponse) {}
  rpc Reset (stream ResetRequest) returns (stream ResetResponse) {}
  rpc Uninstall (stream UninstallRequest) returns (stream UninstallResponse) {}
  rpc Quit (stream QuitRequest) returns (stream QuitResponse) {}

  rpc Identify (IdentifyRequest) returns (IdentifyResponse) {}
}

message ConnectRequest {
  string KubeconfigBytes = 1;
  string Namespace = 2;

  // extra route table info
  ExtraRoute ExtraRoute = 4;

  // ssh jump
  SshJump SshJump = 5;

  // transfer image
  bool TransferImage = 6;
  string Image = 7;
  string ImagePullSecretName = 8;

  // foreground
  bool Foreground = 9;

  // log level
  int32 Level = 10;

  string OriginKubeconfigPath = 11;

  // The namespace where the traffic manager is to be found. Only works in cluster mode (install kubevpn server by helm)
  // reason: user helm install kubevpn server, and all users use this one kubevpn-traffic-manager instance
  // but if normal user don't have list namespace permission(for: helm list -A), needs to special this options.
  // 1. default is namespace kubevpn if kubevpn namespace is exists
  // 2. detect which namespace helm installed by (helm list -A), match app name==kubevpn and status is deployed
  // 3. otherwise, use options '-n' or '--namespace'
  string ManagerNamespace = 12;

  // Inner ip v4 and v6, for recovery from local db,
  // this filed only set when recover from local db, otherwise, always empty
  string IPv4 = 13;
  string IPv6 = 14;
}

message ConnectResponse {
  string message = 1;
  string connectionID = 2;
}

message DisconnectRequest {
  // 1) disconnect by connection id
  optional string ConnectionID = 1;
  // 2) disconnect all
  optional bool All = 2;
  // 3) disconnect by kubeconfig
  optional string KubeconfigBytes = 3;
  optional string Namespace = 4;
  SshJump SshJump = 5;
}

message DisconnectResponse {
  string Message = 1;
}


message ProxyRequest {
  string KubeconfigBytes = 1;
  string Namespace = 2;
  map<string, string> Headers = 3;
  repeated string PortMap = 4;
  repeated string Workloads = 5;

  // extra route table info
  ExtraRoute ExtraRoute = 8;

  // ssh jump
  SshJump SshJump = 9;

  // transfer image
  bool TransferImage = 10;
  string Image = 11;
  string ImagePullSecretName = 12;

  // foreground
  bool Foreground = 13;

  // log level
  int32 Level = 14;

  string OriginKubeconfigPath = 15;

  // The namespace where the traffic manager is to be found. Only works in cluster mode (install kubevpn server by helm)
  // reason: user helm install kubevpn server, and all users use this one kubevpn-traffic-manager instance
  // but if normal user don't have list namespace permission(for: helm list -A), needs to special this options.
  // 1. default is namespace kubevpn if kubevpn namespace is exists
  // 2. detect which namespace helm installed by (helm list -A), match app name==kubevpn and status is deployed
  // 3. otherwise, use options '-n' or '--namespace'
  string ManagerNamespace = 16;
}

message ProxyResponse {
  string Message = 1;
}

message LeaveRequest {
  string Namespace = 1;
  repeated string Workloads = 2;
}

message LeaveResponse {
  string Message = 1;
}

message SyncRequest {
  string KubeconfigBytes = 1;
  string Namespace = 2;
  map<string, string> Headers = 3;
  repeated string Workloads = 4;

  // extra route table info
  ExtraRoute ExtraRoute = 7;

  // ssh jump
  SshJump SshJump = 8;

  // target cluster info
  string TargetContainer = 11;
  string TargetImage = 12;

  // transfer image
  bool TransferImage = 15;
  string Image = 16;
  string ImagePullSecretName = 17;

  // log level
  int32 Level = 18;

  string OriginKubeconfigPath = 19;

  string LocalDir = 20;
  string RemoteDir = 21;
}

message SyncResponse {
  string Message = 1;
}

message UnsyncRequest {
  repeated string Workloads = 1;
}

message UnsyncResponse {
  string Message = 1;
}

message ConnectionListRequest {
}

message ConnectionListResponse {
  repeated Status List = 1;
  string CurrentConnectionID = 2;
}

message ConnectionUseRequest {
  string ConnectionID = 1;
}

message ConnectionUseResponse {
  string Message = 1;
}

message QuitRequest {
}

message QuitResponse {
  string Message = 1;
}

message StatusRequest {
  repeated string ConnectionIDs = 1;
}

message StatusResponse {
  string CurrentConnectionID = 1;
  repeated Status List = 2;
}

message Status {
  string ConnectionID = 2;
  string Cluster = 3;
  string Kubeconfig = 5;
  string Namespace = 6;
  string Status = 7;
  string Netif = 8;
  string IPv4 = 9;
  repeated Proxy ProxyList = 10;
  repeated Sync SyncList = 11;
}

message Proxy {
  string ConnectionID = 1;
  string Cluster = 2;
  string Kubeconfig = 3;
  string Namespace = 4;
  string Workload = 5;
  repeated ProxyRule RuleList = 6;
}

message ProxyRule {
  map<string, string>  Headers = 1;
  string LocalTunIPv4 = 2;
  string LocalTunIPv6 = 3;
  bool CurrentDevice = 4;
  map<int32, int32>  PortMap = 5;
}

message Sync {
  string ConnectionID = 1;
  string Cluster = 2;
  string Kubeconfig = 3;
  string Namespace = 4;
  string Workload = 5;
  string SyncthingGUIAddr = 6;
  repeated SyncRule RuleList = 7;
}

message SyncRule {
  map<string, string> Headers = 1;
  string DstWorkload = 2;
}

message VersionRequest {
}

message VersionResponse {
  string Version = 1;
}

message SshStartRequest {
  string ClientIP = 1;
}

message SshStartResponse {
  string ServerIP = 1;
}

message SshStopRequest {
  string ClientIP = 1;
}

message SshStopResponse {
  string ServerIP = 1;
}

message RouteRequest {
  string cidr = 1;
  RouteType type = 2;
  string dev = 3;
}

enum RouteType {
  ROUTE_ADD = 0;
  ROUTE_DELETE = 1;
}

message RouteResponse {
  string message = 1;
}

message SshConnectRequest {
  string Stdin = 1;
  SshJump SshJump = 2;
}

message SshConnectResponse {
  string Stdout = 1;
  string Stderr = 2;
}

message LogRequest {
  bool Follow = 1;
  int32 Lines = 2;
}

message LogResponse {
  string Message = 1;
}

message UpgradeRequest {
  string ClientVersion = 1;
}

message UpgradeResponse {
  bool NeedUpgrade = 1;
}

message UninstallRequest {
  string KubeconfigBytes = 1;
  string Namespace = 2;
  // ssh jump
  SshJump SshJump = 3;
}

message UninstallResponse {
  string Message = 1;
}

message ResetRequest {
  string KubeconfigBytes = 1;
  string Namespace = 2;
  repeated string Workloads = 3;
  // ssh jump
  SshJump SshJump = 4;
}

message ResetResponse {
  string Message = 1;
}

message SshJump {
  string Addr = 1;
  string User = 2;
  string Password = 3;
  string Keyfile = 4;
  string Jump = 5;
  string ConfigAlias = 6;
  string RemoteKubeconfig = 7;
  string GSSAPIKeytabConf = 8;
  string GSSAPIPassword = 9;
  string GSSAPICacheFile = 10;
}

message ExtraRoute {
  repeated string ExtraCIDR = 1;
  repeated string ExtraDomain = 2;
  bool ExtraNodeIP = 3;
}

message IdentifyRequest {}

message IdentifyResponse {
  string ID = 1;
}

message Cancel {}