// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.2
// source: daemon.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Daemon_Connect_FullMethodName      = "/rpc.Daemon/Connect"
	Daemon_ConnectFork_FullMethodName  = "/rpc.Daemon/ConnectFork"
	Daemon_Disconnect_FullMethodName   = "/rpc.Daemon/Disconnect"
	Daemon_Proxy_FullMethodName        = "/rpc.Daemon/Proxy"
	Daemon_Leave_FullMethodName        = "/rpc.Daemon/Leave"
	Daemon_Clone_FullMethodName        = "/rpc.Daemon/Clone"
	Daemon_Remove_FullMethodName       = "/rpc.Daemon/Remove"
	Daemon_ConfigAdd_FullMethodName    = "/rpc.Daemon/ConfigAdd"
	Daemon_ConfigRemove_FullMethodName = "/rpc.Daemon/ConfigRemove"
	Daemon_SshStart_FullMethodName     = "/rpc.Daemon/SshStart"
	Daemon_SshStop_FullMethodName      = "/rpc.Daemon/SshStop"
	Daemon_SshConnect_FullMethodName   = "/rpc.Daemon/SshConnect"
	Daemon_Logs_FullMethodName         = "/rpc.Daemon/Logs"
	Daemon_List_FullMethodName         = "/rpc.Daemon/List"
	Daemon_Get_FullMethodName          = "/rpc.Daemon/Get"
	Daemon_Upgrade_FullMethodName      = "/rpc.Daemon/Upgrade"
	Daemon_Status_FullMethodName       = "/rpc.Daemon/Status"
	Daemon_Version_FullMethodName      = "/rpc.Daemon/Version"
	Daemon_Reset_FullMethodName        = "/rpc.Daemon/Reset"
	Daemon_Uninstall_FullMethodName    = "/rpc.Daemon/Uninstall"
	Daemon_Quit_FullMethodName         = "/rpc.Daemon/Quit"
	Daemon_Identify_FullMethodName     = "/rpc.Daemon/Identify"
)

// DaemonClient is the client API for Daemon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DaemonClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConnectResponse], error)
	ConnectFork(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConnectResponse], error)
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DisconnectResponse], error)
	Proxy(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProxyResponse], error)
	Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LeaveResponse], error)
	Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CloneResponse], error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RemoveResponse], error)
	ConfigAdd(ctx context.Context, in *ConfigAddRequest, opts ...grpc.CallOption) (*ConfigAddResponse, error)
	ConfigRemove(ctx context.Context, in *ConfigRemoveRequest, opts ...grpc.CallOption) (*ConfigRemoveResponse, error)
	SshStart(ctx context.Context, in *SshStartRequest, opts ...grpc.CallOption) (*SshStartResponse, error)
	SshStop(ctx context.Context, in *SshStopRequest, opts ...grpc.CallOption) (*SshStopResponse, error)
	SshConnect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SshConnectRequest, SshConnectResponse], error)
	Logs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogResponse], error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Upgrade(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*UpgradeResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ResetResponse], error)
	Uninstall(ctx context.Context, in *UninstallRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UninstallResponse], error)
	Quit(ctx context.Context, in *QuitRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QuitResponse], error)
	Identify(ctx context.Context, in *IdentifyRequest, opts ...grpc.CallOption) (*IdentifyResponse, error)
}

type daemonClient struct {
	cc grpc.ClientConnInterface
}

func NewDaemonClient(cc grpc.ClientConnInterface) DaemonClient {
	return &daemonClient{cc}
}

func (c *daemonClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConnectResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Daemon_ServiceDesc.Streams[0], Daemon_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ConnectRequest, ConnectResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_ConnectClient = grpc.ServerStreamingClient[ConnectResponse]

func (c *daemonClient) ConnectFork(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConnectResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Daemon_ServiceDesc.Streams[1], Daemon_ConnectFork_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ConnectRequest, ConnectResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_ConnectForkClient = grpc.ServerStreamingClient[ConnectResponse]

func (c *daemonClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DisconnectResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Daemon_ServiceDesc.Streams[2], Daemon_Disconnect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DisconnectRequest, DisconnectResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_DisconnectClient = grpc.ServerStreamingClient[DisconnectResponse]

func (c *daemonClient) Proxy(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProxyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Daemon_ServiceDesc.Streams[3], Daemon_Proxy_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProxyRequest, ProxyResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_ProxyClient = grpc.ServerStreamingClient[ProxyResponse]

func (c *daemonClient) Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LeaveResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Daemon_ServiceDesc.Streams[4], Daemon_Leave_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LeaveRequest, LeaveResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_LeaveClient = grpc.ServerStreamingClient[LeaveResponse]

func (c *daemonClient) Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CloneResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Daemon_ServiceDesc.Streams[5], Daemon_Clone_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CloneRequest, CloneResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_CloneClient = grpc.ServerStreamingClient[CloneResponse]

func (c *daemonClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RemoveResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Daemon_ServiceDesc.Streams[6], Daemon_Remove_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RemoveRequest, RemoveResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_RemoveClient = grpc.ServerStreamingClient[RemoveResponse]

func (c *daemonClient) ConfigAdd(ctx context.Context, in *ConfigAddRequest, opts ...grpc.CallOption) (*ConfigAddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigAddResponse)
	err := c.cc.Invoke(ctx, Daemon_ConfigAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) ConfigRemove(ctx context.Context, in *ConfigRemoveRequest, opts ...grpc.CallOption) (*ConfigRemoveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigRemoveResponse)
	err := c.cc.Invoke(ctx, Daemon_ConfigRemove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) SshStart(ctx context.Context, in *SshStartRequest, opts ...grpc.CallOption) (*SshStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SshStartResponse)
	err := c.cc.Invoke(ctx, Daemon_SshStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) SshStop(ctx context.Context, in *SshStopRequest, opts ...grpc.CallOption) (*SshStopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SshStopResponse)
	err := c.cc.Invoke(ctx, Daemon_SshStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) SshConnect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SshConnectRequest, SshConnectResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Daemon_ServiceDesc.Streams[7], Daemon_SshConnect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SshConnectRequest, SshConnectResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_SshConnectClient = grpc.BidiStreamingClient[SshConnectRequest, SshConnectResponse]

func (c *daemonClient) Logs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Daemon_ServiceDesc.Streams[8], Daemon_Logs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LogRequest, LogResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_LogsClient = grpc.ServerStreamingClient[LogResponse]

func (c *daemonClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, Daemon_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, Daemon_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) Upgrade(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*UpgradeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResponse)
	err := c.cc.Invoke(ctx, Daemon_Upgrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Daemon_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, Daemon_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ResetResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Daemon_ServiceDesc.Streams[9], Daemon_Reset_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ResetRequest, ResetResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_ResetClient = grpc.ServerStreamingClient[ResetResponse]

func (c *daemonClient) Uninstall(ctx context.Context, in *UninstallRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UninstallResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Daemon_ServiceDesc.Streams[10], Daemon_Uninstall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UninstallRequest, UninstallResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_UninstallClient = grpc.ServerStreamingClient[UninstallResponse]

func (c *daemonClient) Quit(ctx context.Context, in *QuitRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QuitResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Daemon_ServiceDesc.Streams[11], Daemon_Quit_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QuitRequest, QuitResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_QuitClient = grpc.ServerStreamingClient[QuitResponse]

func (c *daemonClient) Identify(ctx context.Context, in *IdentifyRequest, opts ...grpc.CallOption) (*IdentifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifyResponse)
	err := c.cc.Invoke(ctx, Daemon_Identify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaemonServer is the server API for Daemon service.
// All implementations must embed UnimplementedDaemonServer
// for forward compatibility.
type DaemonServer interface {
	Connect(*ConnectRequest, grpc.ServerStreamingServer[ConnectResponse]) error
	ConnectFork(*ConnectRequest, grpc.ServerStreamingServer[ConnectResponse]) error
	Disconnect(*DisconnectRequest, grpc.ServerStreamingServer[DisconnectResponse]) error
	Proxy(*ProxyRequest, grpc.ServerStreamingServer[ProxyResponse]) error
	Leave(*LeaveRequest, grpc.ServerStreamingServer[LeaveResponse]) error
	Clone(*CloneRequest, grpc.ServerStreamingServer[CloneResponse]) error
	Remove(*RemoveRequest, grpc.ServerStreamingServer[RemoveResponse]) error
	ConfigAdd(context.Context, *ConfigAddRequest) (*ConfigAddResponse, error)
	ConfigRemove(context.Context, *ConfigRemoveRequest) (*ConfigRemoveResponse, error)
	SshStart(context.Context, *SshStartRequest) (*SshStartResponse, error)
	SshStop(context.Context, *SshStopRequest) (*SshStopResponse, error)
	SshConnect(grpc.BidiStreamingServer[SshConnectRequest, SshConnectResponse]) error
	Logs(*LogRequest, grpc.ServerStreamingServer[LogResponse]) error
	List(context.Context, *ListRequest) (*ListResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Upgrade(context.Context, *UpgradeRequest) (*UpgradeResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	Reset(*ResetRequest, grpc.ServerStreamingServer[ResetResponse]) error
	Uninstall(*UninstallRequest, grpc.ServerStreamingServer[UninstallResponse]) error
	Quit(*QuitRequest, grpc.ServerStreamingServer[QuitResponse]) error
	Identify(context.Context, *IdentifyRequest) (*IdentifyResponse, error)
	mustEmbedUnimplementedDaemonServer()
}

// UnimplementedDaemonServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDaemonServer struct{}

func (UnimplementedDaemonServer) Connect(*ConnectRequest, grpc.ServerStreamingServer[ConnectResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedDaemonServer) ConnectFork(*ConnectRequest, grpc.ServerStreamingServer[ConnectResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ConnectFork not implemented")
}
func (UnimplementedDaemonServer) Disconnect(*DisconnectRequest, grpc.ServerStreamingServer[DisconnectResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedDaemonServer) Proxy(*ProxyRequest, grpc.ServerStreamingServer[ProxyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Proxy not implemented")
}
func (UnimplementedDaemonServer) Leave(*LeaveRequest, grpc.ServerStreamingServer[LeaveResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedDaemonServer) Clone(*CloneRequest, grpc.ServerStreamingServer[CloneResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (UnimplementedDaemonServer) Remove(*RemoveRequest, grpc.ServerStreamingServer[RemoveResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedDaemonServer) ConfigAdd(context.Context, *ConfigAddRequest) (*ConfigAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigAdd not implemented")
}
func (UnimplementedDaemonServer) ConfigRemove(context.Context, *ConfigRemoveRequest) (*ConfigRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigRemove not implemented")
}
func (UnimplementedDaemonServer) SshStart(context.Context, *SshStartRequest) (*SshStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SshStart not implemented")
}
func (UnimplementedDaemonServer) SshStop(context.Context, *SshStopRequest) (*SshStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SshStop not implemented")
}
func (UnimplementedDaemonServer) SshConnect(grpc.BidiStreamingServer[SshConnectRequest, SshConnectResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SshConnect not implemented")
}
func (UnimplementedDaemonServer) Logs(*LogRequest, grpc.ServerStreamingServer[LogResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedDaemonServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDaemonServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDaemonServer) Upgrade(context.Context, *UpgradeRequest) (*UpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upgrade not implemented")
}
func (UnimplementedDaemonServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedDaemonServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedDaemonServer) Reset(*ResetRequest, grpc.ServerStreamingServer[ResetResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedDaemonServer) Uninstall(*UninstallRequest, grpc.ServerStreamingServer[UninstallResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Uninstall not implemented")
}
func (UnimplementedDaemonServer) Quit(*QuitRequest, grpc.ServerStreamingServer[QuitResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Quit not implemented")
}
func (UnimplementedDaemonServer) Identify(context.Context, *IdentifyRequest) (*IdentifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Identify not implemented")
}
func (UnimplementedDaemonServer) mustEmbedUnimplementedDaemonServer() {}
func (UnimplementedDaemonServer) testEmbeddedByValue()                {}

// UnsafeDaemonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DaemonServer will
// result in compilation errors.
type UnsafeDaemonServer interface {
	mustEmbedUnimplementedDaemonServer()
}

func RegisterDaemonServer(s grpc.ServiceRegistrar, srv DaemonServer) {
	// If the following call pancis, it indicates UnimplementedDaemonServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Daemon_ServiceDesc, srv)
}

func _Daemon_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DaemonServer).Connect(m, &grpc.GenericServerStream[ConnectRequest, ConnectResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_ConnectServer = grpc.ServerStreamingServer[ConnectResponse]

func _Daemon_ConnectFork_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DaemonServer).ConnectFork(m, &grpc.GenericServerStream[ConnectRequest, ConnectResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_ConnectForkServer = grpc.ServerStreamingServer[ConnectResponse]

func _Daemon_Disconnect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DisconnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DaemonServer).Disconnect(m, &grpc.GenericServerStream[DisconnectRequest, DisconnectResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_DisconnectServer = grpc.ServerStreamingServer[DisconnectResponse]

func _Daemon_Proxy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProxyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DaemonServer).Proxy(m, &grpc.GenericServerStream[ProxyRequest, ProxyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_ProxyServer = grpc.ServerStreamingServer[ProxyResponse]

func _Daemon_Leave_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LeaveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DaemonServer).Leave(m, &grpc.GenericServerStream[LeaveRequest, LeaveResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_LeaveServer = grpc.ServerStreamingServer[LeaveResponse]

func _Daemon_Clone_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloneRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DaemonServer).Clone(m, &grpc.GenericServerStream[CloneRequest, CloneResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_CloneServer = grpc.ServerStreamingServer[CloneResponse]

func _Daemon_Remove_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RemoveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DaemonServer).Remove(m, &grpc.GenericServerStream[RemoveRequest, RemoveResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_RemoveServer = grpc.ServerStreamingServer[RemoveResponse]

func _Daemon_ConfigAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).ConfigAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_ConfigAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).ConfigAdd(ctx, req.(*ConfigAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_ConfigRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).ConfigRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_ConfigRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).ConfigRemove(ctx, req.(*ConfigRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_SshStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SshStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).SshStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_SshStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).SshStart(ctx, req.(*SshStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_SshStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SshStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).SshStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_SshStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).SshStop(ctx, req.(*SshStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_SshConnect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DaemonServer).SshConnect(&grpc.GenericServerStream[SshConnectRequest, SshConnectResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_SshConnectServer = grpc.BidiStreamingServer[SshConnectRequest, SshConnectResponse]

func _Daemon_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DaemonServer).Logs(m, &grpc.GenericServerStream[LogRequest, LogResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_LogsServer = grpc.ServerStreamingServer[LogResponse]

func _Daemon_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_Upgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).Upgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_Upgrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).Upgrade(ctx, req.(*UpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_Reset_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DaemonServer).Reset(m, &grpc.GenericServerStream[ResetRequest, ResetResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_ResetServer = grpc.ServerStreamingServer[ResetResponse]

func _Daemon_Uninstall_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UninstallRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DaemonServer).Uninstall(m, &grpc.GenericServerStream[UninstallRequest, UninstallResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_UninstallServer = grpc.ServerStreamingServer[UninstallResponse]

func _Daemon_Quit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QuitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DaemonServer).Quit(m, &grpc.GenericServerStream[QuitRequest, QuitResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Daemon_QuitServer = grpc.ServerStreamingServer[QuitResponse]

func _Daemon_Identify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).Identify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Daemon_Identify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).Identify(ctx, req.(*IdentifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Daemon_ServiceDesc is the grpc.ServiceDesc for Daemon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Daemon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Daemon",
	HandlerType: (*DaemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigAdd",
			Handler:    _Daemon_ConfigAdd_Handler,
		},
		{
			MethodName: "ConfigRemove",
			Handler:    _Daemon_ConfigRemove_Handler,
		},
		{
			MethodName: "SshStart",
			Handler:    _Daemon_SshStart_Handler,
		},
		{
			MethodName: "SshStop",
			Handler:    _Daemon_SshStop_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Daemon_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Daemon_Get_Handler,
		},
		{
			MethodName: "Upgrade",
			Handler:    _Daemon_Upgrade_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Daemon_Status_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Daemon_Version_Handler,
		},
		{
			MethodName: "Identify",
			Handler:    _Daemon_Identify_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Daemon_Connect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConnectFork",
			Handler:       _Daemon_ConnectFork_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Disconnect",
			Handler:       _Daemon_Disconnect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Proxy",
			Handler:       _Daemon_Proxy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Leave",
			Handler:       _Daemon_Leave_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Clone",
			Handler:       _Daemon_Clone_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Remove",
			Handler:       _Daemon_Remove_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SshConnect",
			Handler:       _Daemon_SshConnect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Logs",
			Handler:       _Daemon_Logs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Reset",
			Handler:       _Daemon_Reset_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Uninstall",
			Handler:       _Daemon_Uninstall_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Quit",
			Handler:       _Daemon_Quit_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "daemon.proto",
}
